# @date : 21 Juillet 2021
# @desc : crée le fichier rds depuis les données shp du zip téléchargé
# @status :
# pre : 1-download-osm.R
library(glue)
library(stringr)
library(sf)
library(tidyverse)
source("scripts/load_data.R") # Lecture des données
load_data()
regions <- regs$NOM_REG_M
regions
region <- "ILE DE FRANCE"
message(">> Traitement de ", region)
# Lister les fichiers du dossier
zip_dir <- "data-raw"
fichiers_zips <- list.files(file.path(zip_dir, region), ".zip", full.names = T)
fichiers_zips
for (fichier_zip in fichiers_zips) {
folder_name <- gsub(".*/(.*)-latest-free.shp.zip$", "\\1", fichier_zip)
fichier_rds <- file.path(zip_dir, region, glue("{folder_name}.rds"))
print(fichier_rds)
if(file.exists(fichier_rds)) next
cmd <- glue('"C:\\Program Files\\7-Zip\\7z" x "{fichier_zip}" -o"{zip_dir}/{region}/{folder_name}"')
# cmd <- glue('7z x "{fichier_zip}" -o"{zip_dir}/{region}/{folder_name}"')
system(cmd)
# Export
fichier_shp <- file.path(zip_dir, region, folder_name, "gis_osm_roads_free_1.shp")
f <- st_read(fichier_shp)
f$zone <- folder_name
saveRDS(f, fichier_rds)
}
# MERGE RDS ----
fichier_rds <- file.path(zip_dir, glue("{region}.rds"))
fichier_rds
if(file.exists(fichier_rds)) next
fichiers_rds <- list.files(file.path(zip_dir, region), ".rds", full.names = T)
fichiers_rds <- list.files(file.path(zip_dir, region), ".rds", full.names = T)
out <- vector(mode = "list")
out <- lapply(fichiers_rds, function(x) {
f <- readRDS(x)
if("zone" %in% names(f)) {
f <- f %>% select(-zone)
}
f
}) # !! réactiver la zone
res <- do.call(rbind, out)
# @date : 21 Juillet 2021
# @desc : crée le fichier rds depuis les données shp du zip téléchargé
# @status :
# pre : 1-download-osm.R
library(glue)
library(stringr)
library(sf)
library(tidyverse)
source("scripts/load_data.R") # Lecture des données
load_data()
regions <- regs$NOM_REG_M
create_region_rds <- function(region) {
message(">> Traitement de ", region)
# Lister les fichiers du dossier
zip_dir <- "data-raw"
fichiers_zips <- list.files(file.path(zip_dir, region), ".zip", full.names = T)
# UNZIP ----
for (fichier_zip in fichiers_zips) {
folder_name <- gsub(".*/(.*)-latest-free.shp.zip$", "\\1", fichier_zip)
fichier_rds <- file.path(zip_dir, region, glue("{folder_name}.rds"))
print(fichier_rds)
if(file.exists(fichier_rds)) next
cmd <- glue('"C:\\Program Files\\7-Zip\\7z" x "{fichier_zip}" -o"{zip_dir}/{region}/{folder_name}"')
# cmd <- glue('7z x "{fichier_zip}" -o"{zip_dir}/{region}/{folder_name}"')
system(cmd)
# Export
fichier_shp <- file.path(zip_dir, region, folder_name, "gis_osm_roads_free_1.shp")
f <- st_read(fichier_shp)
f$zone <- folder_name
saveRDS(f, fichier_rds)
}
# MERGE RDS ----
fichier_rds <- file.path(zip_dir, glue("{region}.rds"))
if(file.exists(fichier_rds)) next
fichiers_rds <- list.files(file.path(zip_dir, region), ".rds", full.names = T)
out <- vector(mode = "list")
out <- lapply(fichiers_rds, function(x) {
f <- readRDS(x)
if("zone" %in% names(f)) {
f <- f %>% select(-zone)
}
f
}) # !! réactiver la zone
res <- do.call(rbind, out)
saveRDS(res, fichier_rds)
# SUPPRESSION DU DOSSIER REGION ----
dossier <- file.path(zip_dir, glue("{region}"))
if(!file.exists(dossier)) next
cmd <- glue('rmdir /s /q "{dossier}"')
system(cmd)
shell(glue("rmdir /s /q '{dossier}'"))
}
create_region_rds(region = "ILE DE FRANCE")
message(">> Traitement de ", region)
# Lister les fichiers du dossier
zip_dir <- "data-raw"
fichiers_zips <- list.files(file.path(zip_dir, region), ".zip", full.names = T)
# UNZIP ----
for (fichier_zip in fichiers_zips) {
folder_name <- gsub(".*/(.*)-latest-free.shp.zip$", "\\1", fichier_zip)
fichier_rds <- file.path(zip_dir, region, glue("{folder_name}.rds"))
print(fichier_rds)
if(file.exists(fichier_rds)) next
cmd <- glue('"C:\\Program Files\\7-Zip\\7z" x "{fichier_zip}" -o"{zip_dir}/{region}/{folder_name}"')
# cmd <- glue('7z x "{fichier_zip}" -o"{zip_dir}/{region}/{folder_name}"')
system(cmd)
# Export
fichier_shp <- file.path(zip_dir, region, folder_name, "gis_osm_roads_free_1.shp")
f <- st_read(fichier_shp)
f$zone <- folder_name
saveRDS(f, fichier_rds)
}
# MERGE RDS ----
fichier_rds <- file.path(zip_dir, glue("{region}.rds"))
if(file.exists(fichier_rds)) next
fichiers_rds <- list.files(file.path(zip_dir, region), ".rds", full.names = T)
out <- vector(mode = "list")
out <- lapply(fichiers_rds, function(x) {
f <- readRDS(x)
if("zone" %in% names(f)) {
f <- f %>% select(-zone)
}
f
}) # !! réactiver la zone
res <- do.call(rbind, out)
saveRDS(res, fichier_rds)
# SUPPRESSION DU DOSSIER REGION ----
dossier <- file.path(zip_dir, glue("{region}"))
if(!file.exists(dossier)) next
cmd <- glue('rmdir /s /q "{dossier}"')
system(cmd)
shell(glue("rmdir /s /q '{dossier}'"))
create_region_rds <- function(region) {
message(">> Traitement de ", region)
# Lister les fichiers du dossier
zip_dir <- "data-raw"
fichiers_zips <- list.files(file.path(zip_dir, region), ".zip", full.names = T)
# UNZIP ----
for (fichier_zip in fichiers_zips) {
folder_name <- gsub(".*/(.*)-latest-free.shp.zip$", "\\1", fichier_zip)
fichier_rds <- file.path(zip_dir, region, glue("{folder_name}.rds"))
print(fichier_rds)
if(file.exists(fichier_rds)) next
cmd <- glue('"C:\\Program Files\\7-Zip\\7z" x "{fichier_zip}" -o"{zip_dir}/{region}/{folder_name}"')
# cmd <- glue('7z x "{fichier_zip}" -o"{zip_dir}/{region}/{folder_name}"')
system(cmd)
# Export
fichier_shp <- file.path(zip_dir, region, folder_name, "gis_osm_roads_free_1.shp")
f <- st_read(fichier_shp)
f$zone <- folder_name
saveRDS(f, fichier_rds)
}
# MERGE RDS ----
fichier_rds <- file.path(zip_dir, glue("{region}.rds"))
if(file.exists(fichier_rds)) next
fichiers_rds <- list.files(file.path(zip_dir, region), ".rds", full.names = T)
out <- vector(mode = "list")
out <- lapply(fichiers_rds, function(x) {
f <- readRDS(x)
if("zone" %in% names(f)) {
f <- f %>% select(-zone)
}
f
}) # !! réactiver la zone
res <- do.call(rbind, out)
saveRDS(res, fichier_rds)
# SUPPRESSION DU DOSSIER REGION ----
dossier <- file.path(zip_dir, glue("{region}"))
if(!file.exists(dossier)) next
cmd <- glue('rmdir /s /q "{dossier}"')
system(cmd)
shell(glue("rmdir /s /q '{dossier}'"))
}
create_region_rds(region = "ILE DE FRANCE")
# @date : 21 Juillet 2021
# @desc : crée le fichier rds depuis les données shp du zip téléchargé
# @status :
# pre : 1-download-osm.R
library(glue)
library(stringr)
library(sf)
library(tidyverse)
source("scripts/load_data.R") # Lecture des données
load_data()
regions <- regs$NOM_REG_M
create_region_rds <- function(region) {
message(">> Traitement de ", region)
# Lister les fichiers du dossier
zip_dir <- "data-raw"
fichiers_zips <- list.files(file.path(zip_dir, region), ".zip", full.names = T)
# UNZIP ----
for (fichier_zip in fichiers_zips) {
folder_name <- gsub(".*/(.*)-latest-free.shp.zip$", "\\1", fichier_zip)
fichier_rds <- file.path(zip_dir, region, glue("{folder_name}.rds"))
print(fichier_rds)
if(file.exists(fichier_rds)) next
cmd <- glue('"C:\\Program Files\\7-Zip\\7z" x "{fichier_zip}" -o"{zip_dir}/{region}/{folder_name}"')
# cmd <- glue('7z x "{fichier_zip}" -o"{zip_dir}/{region}/{folder_name}"')
system(cmd)
# Export
fichier_shp <- file.path(zip_dir, region, folder_name, "gis_osm_roads_free_1.shp")
f <- st_read(fichier_shp)
f$zone <- folder_name
saveRDS(f, fichier_rds)
}
# MERGE RDS ----
fichier_rds <- file.path(zip_dir, glue("{region}.rds"))
if(file.exists(fichier_rds)) quit()
fichiers_rds <- list.files(file.path(zip_dir, region), ".rds", full.names = T)
out <- vector(mode = "list")
out <- lapply(fichiers_rds, function(x) {
f <- readRDS(x)
if("zone" %in% names(f)) {
f <- f %>% select(-zone)
}
f
}) # !! réactiver la zone
res <- do.call(rbind, out)
saveRDS(res, fichier_rds)
# SUPPRESSION DU DOSSIER REGION ----
dossier <- file.path(zip_dir, glue("{region}"))
if(!file.exists(dossier)) next
cmd <- glue('rmdir /s /q "{dossier}"')
system(cmd)
shell(glue("rmdir /s /q '{dossier}'"))
}
create_region_rds(region = "ILE DE FRANCE")
# @date : 21 Juillet 2021
# @desc : crée le fichier rds depuis les données shp du zip téléchargé
# @status :
# pre : 1-download-osm.R
library(glue)
library(stringr)
library(sf)
library(tidyverse)
source("scripts/load_data.R") # Lecture des données
load_data()
regions <- regs$NOM_REG_M
create_region_rds <- function(region, output_dir) {
message(">> Traitement de ", region)
# Lister les fichiers du dossier
fichiers_zips <- list.files(file.path(output_dir, region), ".zip", full.names = T)
fichier_rds <- file.path(output_dir, glue("{region}.rds"))
if(file.exists(fichier_rds)) return()
# UNZIP ----
for (fichier_zip in fichiers_zips) {
folder_name <- gsub(".*/(.*)-latest-free.shp.zip$", "\\1", fichier_zip)
fichier_rds <- file.path(output_dir, region, glue("{folder_name}.rds"))
print(fichier_rds)
if(file.exists(fichier_rds)) return()
cmd <- glue('"C:\\Program Files\\7-Zip\\7z" x "{fichier_zip}" -o"{output_dir}/{region}/{folder_name}"')
# cmd <- glue('7z x "{fichier_zip}" -o"{output_dir}/{region}/{folder_name}"')
system(cmd)
# Export
fichier_shp <- file.path(output_dir, region, folder_name, "gis_osm_roads_free_1.shp")
f <- st_read(fichier_shp)
f$zone <- folder_name
saveRDS(f, fichier_rds)
}
# MERGE RDS ----
fichiers_rds <- list.files(file.path(output_dir, region), ".rds", full.names = T)
out <- vector(mode = "list")
out <- lapply(fichiers_rds, function(x) {
f <- readRDS(x)
if("zone" %in% names(f)) {
f <- f %>% select(-zone)
}
f
}) # !! réactiver la zone
res <- do.call(rbind, out)
saveRDS(res, fichier_rds)
# SUPPRESSION DU DOSSIER REGION ----
dossier <- file.path(output_dir, glue("{region}"))
if(!file.exists(dossier)) next
cmd <- glue('rmdir /s /q "{dossier}"')
system(cmd)
shell(glue("rmdir /s /q '{dossier}'"))
}
create_region_rds(region = "ILE DE FRANCE", output_dir = "data-raw")
fichiers_rds <- list.files("data-raw", ".rds", full.names = T)
fichier_rds <- file.path("data-raw", glue("{region}.rds"))
f <- readRDS(fichier_rds)
message("> Traitement de ", fichier_rds)
message(">> Traitement de la région ", nom_region)
code_reg <- regs %>% dplyr::filter(NOM_REG_M == nom_region) %>% pull(INSEE_REG)
comms_reg <- comms %>% filter(INSEE_REG == code_reg) %>% arrange(INSEE_DEP, NOM_COM)
nom_region <- "ILE DE FRANCE"
fichier_rds <- file.path("data-raw", glue("{nom_region}.rds"))
f <- readRDS(fichier_rds)
message("> Traitement de ", fichier_rds)
code_reg <- regs %>% dplyr::filter(NOM_REG_M == nom_region) %>% pull(INSEE_REG)
comms_reg <- comms %>% filter(INSEE_REG == code_reg) %>% arrange(INSEE_DEP, NOM_COM)
# READ COMMUNES
code_reg <- regs %>% dplyr::filter(NOM_REG_M == nom_region) %>% pull(INSEE_REG)
comms_reg <- comms %>% filter(INSEE_REG == code_reg) %>% arrange(INSEE_DEP, NOM_COM)
i <- st_intersects(comms_reg, f)
dim(i)
nrow(comms)
nrow(comms_ref)
nrow(comms_reg)
int <- i
i=1
comm <- comms_reg[i, ]
w <- int[i, ]
i
int
int[[i]]
w <- int[[i]]
for(i in 1:nrow(int)) {
comm <- comms_reg[i, ]
nom_comm <- comm$NOM_COM
insee_com <- comm$INSEE_COM
file_name <- glue("{insee_com}-{nom_com}.rds")
message(">> Création de ", nom_com, " ", insee_com)
file_path <- file.path(output_dir, file_name)
if(file.exists(file_path)) next
w <- int[[i]]
f.sel <- f %>% slice(w)
saveRDS(f.sel, file_path)
}
for(i in 1:nrow(int)) {
comm <- comms_reg[i, ]
nom_com <- comm$NOM_COM
insee_com <- comm$INSEE_COM
file_name <- glue("{insee_com}-{nom_com}.rds")
message(">> Création de ", nom_com, " ", insee_com)
file_path <- file.path(output_dir, file_name)
if(file.exists(file_path)) next
w <- int[[i]]
f.sel <- f %>% slice(w)
saveRDS(f.sel, file_path)
}
# Dossier d'export ----
output_dir <- nom_region
dir.create(output_dir, recursive = T)
for(i in 1:nrow(int)) {
comm <- comms_reg[i, ]
nom_com <- comm$NOM_COM
insee_com <- comm$INSEE_COM
file_name <- glue("{insee_com}-{nom_com}.rds")
message(">> Création de ", nom_com, " ", insee_com)
file_path <- file.path(output_dir, file_name)
if(file.exists(file_path)) next
w <- int[[i]]
f.sel <- f %>% slice(w)
saveRDS(f.sel, file_path)
}
file_path <- file.path(output_dir, file_name)
if(file.exists(file_path)) next
w <- int[[i]]
f.sel <- f %>% slice(w)
# saveRDS(f.sel, file_path)
st_write(f.sel, file_path)
file_name <- glue("{insee_com}-{nom_com}.geojson")
message(">> Création de ", nom_com, " ", insee_com)
file_path <- file.path(output_dir, file_name)
if(file.exists(file_path)) next
w <- int[[i]]
f.sel <- f %>% slice(w)
# saveRDS(f.sel, file_path)
st_write(f.sel, file_path)
for(i in 1:nrow(int)) {
comm <- comms_reg[i, ]
nom_com <- comm$NOM_COM
insee_com <- comm$INSEE_COM
file_name <- glue("{insee_com}-{nom_com}.geojson")
message(">> Création de ", nom_com, " ", insee_com)
file_path <- file.path(output_dir, file_name)
if(file.exists(file_path)) next
w <- int[[i]]
f.sel <- f %>% slice(w)
st_write(f.sel, file_path)
}
